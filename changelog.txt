            =======================================================
------------| MORE BACKLOG/ETC (IN ADDITION TO OFFICE WHITEBOARD) |------------
            =======================================================
    
-revise map stucture to include map title, previous map, next map, score, etc.
-finish implementing "end of level" object in editor for some WYSIWYG-ey-ness
-Weapon class
-emitters for gfx?
-Triggers for ending the level and loading the next one
-looping sound for level music
-midi or mp3 or ogg playback?
-boss levels (infinite looping level with boss, boss health, and that's about it)
-DONE - editor: need a way to name level, set attributes (such as looping, etc.)
-editor: need to fix fill function


                            ===================
----------------------------|CHANGES (BY DATE)|---------------------------------
                            ===================

December 18, 2010:
-----------------
-Captain's log, livingroom couch. Watching @notch's Ludum Dare 19 livestream and not getting anything done
-added velocity change flag to avatar so that the sound and velocity change can only happen once
 per arrow key release (e.g. press up arrow causes acceleration, but it's disabled until up arrow is released)
-Added an options dialog (EditorOptionsDialog) and action listener (MapEditorActionListener, embedded in MapEditor) to
 handle and manage setting level name, loop state, and other stuff when editing levels.
[...]
-added shadow effect animations to Thing class, along with shadow draw offsets
-working shadows for avatar
-updated main game menu artwork and placement

December 13/15/17, 2010:
-----------------------
-added "looping" attribute to level file structure to allow for looping boss levels 
-updated Map getRows and getCols to getRowCount and getColCount
-added "looping" to writeLevelWithLayers function in Level class to fix ArrayIndexOutOfBoundsException when level xml had no looping attribute
[...]
-looping levels now works, but the code has lots of useless commented out bits around line 344 of GameSkeleton.
-Did an efficiency check on the looping levels, and there are no memory leaks.
-need to make another way for looping "boss" levels to end (since y coord will no longer end the level
-TODO: loop level things as well? So if we're in a looping level, never kill off the things. This might get ugly, as the Thing processing
 functions set game state to dead when the thing is off the screen. Perhaps a toggle in the Thing class, or perhaps something else.
-added inLoopingLevel to Thing class, and getter/setter functions
-added BossTest class to test boss levels. They work mostly. Yay.
-added inLoopingLevel check/set in Level loading to tell things they are in boss level when the xml is loaded in.
-replaced main game menu sounds and the performance seems to be choppy when playing them. Hmm...


December 8, 2010:
----------------
-updated graphics for avatar
-updated menu graphics and intro screen
-cleaned out a bunch of duplicate files from /bin (for zip file size!)

December 7, 2010:
----------------
-replaced System.out.println with GameSkeleton.printDebugMessage project-wide
-added sound string constants to Avatar and deleted redundant sound files
-for optimized stutter-free playback, Thing.initSounds() will still be used for pre-loading
-if avatar is dying, suspended the controls
-added some sounds for accelerating and decelerating, needs some work though
-cleaned out comments and some TODOs from GameSkeleton, AnimatedSprite, Animation 

December 6, 2010:
----------------
-implemented SoundManagerSingleton class, now all objects need to use this to play sounds
-TODO: no need to call initSounds() in Thing class, since the sounds are loaded and played at run time
-Comparison using lvl-01.xml (about a billion guys): 
-- SoundSystem in each Thing took a little over 3 minutes to load, used 280MB of RAM, and was choppy during huge clusters of Things on screen shooting
-- Centralized singleton SoundSystem took a few seconds to load, used 1010MB of RAM, and was also choppy during the same huge clusters
-added _soundEnabled flag to GameMenu class so we can have soundless menus (this also uncovered a bug where null sounds caused exceptions)
-need to cleanup sound engine code in Thing objects and GameSkeleton...and should probably make GameSkeleton a Singleton object too...

November 25, 2010:
-----------------
-implemented a test applet frankenstein'd from paulscode.com's SoundSystem and my Keyboard code, music/sound in mid, ogg, and wav works
-switched over GameSkeleton's main game music to SoundSystem and it works
-switched over all Avatar sound effects to SoundSystem and it works.
-HELL YEAH XD

September 18, 2010:
------------------
-removed WindowUtilities class - no longer needed
-added HealthBar class and associated HUD artwork
-added LIFE_STATE_DEAD_AND_GONE for dead things that can be removed from play. Also changed LIFE_STATE_DEAD to allow
 for things like "dead" turrets to remain on screen/in play, but be disabled/destroyed
-added play bounds and HUD with health bar etc
-set health bar blinking/pulsing to get quicker as health gets lower - looks cool! :D (first piece of polish?:))
-added icons to Weapon class for HUD purposes


September 16, 2010:
------------------
-fixed rise/run trig junk in projectiles and bad guys. They now shoot in the correct direction and more simply. See top of ThingManager class for note
-removed Orb class, replaced with abstract OrbProjectile class, and added OrbProjectile8x8 and OrbProjectile6x6 classes. Now easier to add more.
-added speeder sprites, UFO sprites, and UFO enemy class

September 9, 2010:
-----------------
-particle emitter now working, tested with pixel/rect particles and basic smoke particle
-turrets now show "destroyed" image after they are destroyed
-added missile reload powerup class, "Missiles" 

August 30, 2010:
---------------
-added thing eraser as right-click when using eraser tool
-click and drag now works for drawing and erasing tiles, erasing things. Single drag still intact for other functions
-thing palette "click to select thing" now fully working again (default size problem)
-fixed bug with picking a tile that is null or on another layer. Now just picks nothing and lets you pick again

August 29, 2010:
---------------
-added GameScreen class and GameSkeleton.drawScreen() function to manage screens more effectively
-added Health thing so that the avatar heals when it's picked up

August 28, 2010:
---------------
-added sprite font engine class called GameFont - yay!! :)

August 25, 2010:
---------------
-added test game screen for level transitions, splashes, etc. that basically loops graphics animations and sound until some key is pressed
-added sound stopping ability to kill sounds and music during transitions
-added flushKeyPresses to KeyBoardInput but i dont think it works yet...
-deleted old crappy sound classes from project
-renamed my custom sound classes to GameSound and SoundManager

August 23, 2010
---------------
-implemented VERY rudementary level progression and fixed error while loading level sequence.

August 20, 2010:
---------------
-added a level sequence file, but loadLevelSequence is currently not working in GameSkeleton (crapping out due to out of bounds)
-added full functionality for saveAs and Open level, with file pickers and all that jazz

August 19, 2010:
---------------
-added FileMenu class and moved save/load there, changed cursor arrows to select menu, and reserved WASD for map movement
-added help hints screen and F1 toggle

August 18, 2010:
---------------
-added basic yet expandable menu system with sounds and animations. it works. yay.
-added a couple new sound FX in SFXR file format
-cleaned out some of the larger and unused-in-many-builds resources like some old PSDs and SKPs and AIFFs

August 13, 2010:
---------------
-rudimentary  dialogs working, and FUCK JMENUs while Double buffering. :P

August 12, 2010:
---------------
-Added ThingManager class to centralize all the Thing case statements from everywhere, contain ThingIDs, Thing damage matrix, etc.
-Added very basic "turret" class - which is basically a BadGuyTest that has no Y velocity, with a different sprite :P

August 9, 2010
--------------
-sound wasn't working well, so I wrote my own threaded (and very basic) sound class. It works pretty well, and best of all it isn't choppy as hell!
--see SoundMan and SoundTest2 class, also added SoundStresser class to test the other sound classes
-also added a couple new sfx. It's going to be challenging to make looping sound effects that sound good when they loop

July 24, 2010
-------------
-sound works(!!!!). Using library from David Brackeen, which can be shipped in commercial games. Look @ license in README.txt in com.rjw.sound

July 22, 2010
-------------
-added animations and effects to bad guy test, and the little crappy test sprite turned out pretty neat looking!
-added bounding boxes to everything, and corrected sizes of some things (projectiles mostly)
-added Weapon class and put 2 weapons in the Avatar - Missiles (Spread) and 50mm bullets
-added a collision/damage matrix in OtherStuff so I can do an elegant-ish lookup that works everytime no matter what.
-added Thing function called "hasEffectAnimation" and added effect rendering to GameSkeleton
-added weapon switch "Z" key to Game Skeleton to test weapon switching, ammo, etc.

July 19, 2010
-------------
-morning code jam yielded a working orb that fire at the avatar, and some cool looking clouds that create a nicer parallax effect :) time for work :(

July 18, 2010
-------------
-made a lot of optimizations including only drawing visible tiles and things, and destroying things that have _isAlive as false (working with Projectile)
-also have things now moving with map tiles
-added frame limiter (currently set to 30fps)
-converted _things in layers to array and added add/remove functions


July 14, 2010
-------------
-Fixed the performance issue by implementing:
-- a tileset storage scheme in the xml files so we load all used tilesets and nothing else
-- a new tile constructor to make tiles from copy (along with AnimatedSprite match dur to inheritance)
-- a new tile constructor to make tiles from referenced image instead of loading image by name from disk every time (helps during level loading especially) 
-- a new scheme for storing tiles to xml file so that unused slots that do not have tiles are not stored at all instead of stored as "null"
-- got rid of "row" storage in xml level files
-- replaced vector maps with 2D array maps
-Now fully-loaded map with 6 layers @ 1600 tiles each only consumes ~46MB RAM, and increases ~logrithmically instead of "exponential increase of doom"
-Time to go play Metal Slug and drink some scotch! :D
...
-did some stress tests: a 1000x20 map is slow, but still works. Doing a filling the entire map makes the stack overflow beceause of the recursion. Need to fix
-a 500x20 map seems to be a good length for gameplay, will take about 1m 20s to scroll through
-changed the erase funtion to actually delete the tile, not just replace with a default texture
-played around with avatar speed to make it feel a bit snappier, and made map scroll default to be fixed at 3, not relative to avatar
 

July 10, 2010
------------
-Multi-layer support fully functional with new UI "Layer Manager", layer switch, and show/hide functionality
-added "new map" functionality to kill current map and make a new one using default sizes etc.
-TODO: Encountering serious performance hits and java heap crashes when filling/replacing tiles on huge maps

July 8, 2010
------------
-started adding layers to levels by adding LevelLayer class and starting to create load/write functions for the layered level

July 7, 2010
------------
-removed old tile and thing palettes
-put in place thingsetpalette that reads from xml files, creates dynamic palette images
-saving a loading tested and working with multiple thing sets and tile sets - yay!

June 20, 2010
-------------
-multiple TileSets now working (YES.) with click to switch arrows and such
-skeleton ThingSetPalette and ThingSet class in place, requires xml parsing of thing file and some dynamic image creation

June 17, 2010
-------------
-map saving/loading now works for tilesets, and things
-added new function to level to move all elements by x/y delta at start of level to align camera 

June 16, 2010
-------------
-new tilesetpalette is almost working perfectly, but after loading a map that uses tilemap tiles, the file and replace functions
 are broken again. Probably the name comparison needs to be updated to compare name and tilemapX/Y values
-changed Map::replaceTile() to replace with a tilemap tile so that the right tilemapX/Y coords are saved when writing level to xml
-added some test tile sets and a blank tileset for reference/debugging
 

June 12, 2010
-------------
-got file IO to work with [I]nput to load and [O]utput to save in the editor
-slowly converting to 32px tiles, but it broke find/replace/fill in editor
--find replace fixed using String compareTo instead of "==".
-GameSkeleton now starts from loaded level contained in "lvl_01.xml"
-Things now loading with Map when loading levels from a file
-Level class and data structure is near complete
-added TileSetPalette, which is a snazzy auto-hiding palette, still need to make single image tile sets clickable etc, but the UI is mainly there



May 29, 2010
------------
-have a working file IO test for XML level file reading and writing (hard coded values for test) 

May 28, 2010
------------
-cleaned up some TODOs (nothing code-based really)

May 23, 2010
------------

-added a LOT of stuff. :)
-tile palette now working completely with sample tile set (with single and grid images working)
-added abstract palette class so I can more easily add more palettes and maintain existing ones
-thing palette now working with sample thing set, so I can add tiles AND things
-time to play a game or two to absorb/compare

Before May 23, 2010
-------------------
-see gmail notes
